// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
/// Role of a user in the system
enum Role {
  SELLER
  BUYER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(BUYER)

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  // Scheduling relations
  appointmentsAsSeller Appointment[] @relation("SellerAppointments")
  appointmentsAsBuyer  Appointment[] @relation("BuyerAppointments")

  // Google API tokens per user (seller or buyer) for Calendar access
  encryptedRefreshToken   String?
  googleAccessToken       String?
  googleAccessTokenExpires DateTime?
  calendarId              String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @map("refreshToken")
  access_token      String?   @map("accessToken")
  expires_at        Int?
  refresh_token_expires_in Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Appointment {
  id           String   @id @default(cuid())
  sellerId     String
  buyerId      String
  start        DateTime
  end          DateTime
  googleEventId String  @unique
  summary      String?
  description  String?
  location     String?

  seller User @relation("SellerAppointments", fields: [sellerId], references: [id])
  buyer  User @relation("BuyerAppointments", fields: [buyerId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([sellerId, start])
  @@index([buyerId, start])
}
